package web3j.cps;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class CPSTestToken1 extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b60405162003926380380620039268339810160405280805182019190602001805182019190602001805190602001909190805190602001909190505082600190805190602001906200006492919062000178565b5083600090805190602001906200007d92919062000178565b5081600260006101000a81548160ff021916908360ff1602179055508060038190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060646004819055505050505062000227565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001bb57805160ff1916838001178555620001ec565b82800160010185558215620001ec579182015b82811115620001eb578251825591602001919060010190620001ce565b5b509050620001fb9190620001ff565b5090565b6200022491905b808211156200022057600081600090555060010162000206565b5090565b90565b6136ef80620002376000396000f300606060405260043610610153576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062772b711461046c57806306fdde03146104a3578063095ea7b31461053157806318160ddd1461058b5780632194f3a2146105b457806323b872dd14610609578063313ce567146106825780634b752953146106b15780635d5179be146106e857806365f2bc2e1461071d578063661884631461074657806370a08231146107a05780639301555b146107ed578063933ba41314610810578063950d550c1461083957806395d89b411461088e578063a111bab91461091c578063a9059cbb14610945578063ba90f44214610994578063be45fd62146109b7578063cf1cb35114610a3c578063d73dd62314610a73578063d98fd74214610acd578063dd62ed3e14610b06578063e1fd9cbf14610b72578063e70b387514610ba9575b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561018f57600080fd5b34600554016005819055506004546101a5610bde565b60ff1602600a348115156101b557fe5b04189050806101c2610bf5565b60086000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031015151561023257600080fd5b8060086000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540360086000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561046957600080fd5b50005b341561047757600080fd5b61048d6004808035906020019091905050610d9e565b6040518082815260200191505060405180910390f35b34156104ae57600080fd5b6104b6610df7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104f65780820151818401526020810190506104db565b50505050905090810190601f1680156105235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053c57600080fd5b610571600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e9f565b604051808215151515815260200191505060405180910390f35b341561059657600080fd5b61059e610f91565b6040518082815260200191505060405180910390f35b34156105bf57600080fd5b6105c7610f9b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561061457600080fd5b610668600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fc1565b604051808215151515815260200191505060405180910390f35b341561068d57600080fd5b610695610bde565b604051808260ff1660ff16815260200191505060405180910390f35b34156106bc57600080fd5b6106d260048080359060200190919050506115cb565b6040518082815260200191505060405180910390f35b34156106f357600080fd5b61071b6004808035906020019091908035906020019091908035906020019091905050611627565b005b341561072857600080fd5b610730611b00565b6040518082815260200191505060405180910390f35b341561075157600080fd5b610786600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b06565b604051808215151515815260200191505060405180910390f35b34156107ab57600080fd5b6107d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d8e565b6040518082815260200191505060405180910390f35b34156107f857600080fd5b61080e6004808035906020019091905050611dd7565b005b341561081b57600080fd5b6108236122b4565b6040518082815260200191505060405180910390f35b341561084457600080fd5b61084c6122ba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561089957600080fd5b6108a16122e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108e15780820151818401526020810190506108c6565b50505050905090810190601f16801561090e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561092757600080fd5b61092f610bf5565b6040518082815260200191505060405180910390f35b61097a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612388565b604051808215151515815260200191505060405180910390f35b341561099f57600080fd5b6109b56004808035906020019091905050612800565b005b34156109c257600080fd5b610a3a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050612b2e565b005b3415610a4757600080fd5b610a5d6004808035906020019091905050612e6b565b6040518082815260200191505060405180910390f35b3415610a7e57600080fd5b610ab3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612ec4565b604051808215151515815260200191505060405180910390f35b3415610ad857600080fd5b610b04600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506130b7565b005b3415610b1157600080fd5b610b5c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506131af565b6040518082815260200191505060405180910390f35b3415610b7d57600080fd5b610b936004808035906020019091905050613236565b6040518082815260200191505060405180910390f35b3415610bb457600080fd5b610bdc60048080359060200190919080359060200190919080359060200190919050506132e6565b005b6000600260009054906101000a900460ff16905090565b600080600080915060009050600190505b600560ff1681111515610ccc5742600a600083815260200190815260200160002060405180807f646561646c696e6500000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020541115610cbf57600a600082815260200190815260200160002060405180807f616d6f756e7400000000000000000000000000000000000000000000000000008152506006019050908152602001604051809103902054820191505b8080600101915050610c06565b600190505b600560ff1681111515610d9657600a600060058301815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c019050908152602001604051809103902054600a600060058401815260200190815260200160002060405180807f616d6f756e740000000000000000000000000000000000000000000000000000815250600601905090815260200160405180910390205403820191508080600101915050610cd1565b819250505090565b6000600a600083815260200190815260200160002060405180807f646561646c696e6500000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020549050919050565b610dff61369b565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e955780601f10610e6a57610100808354040283529160200191610e95565b820191906000526020600020905b815481529060010190602001808311610e7857829003601f168201915b5050505050905090565b600081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600354905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610fcc6136af565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561100857600080fd5b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561105657600080fd5b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484111515156110e157600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156111e05761113f610bf5565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540384111580156111d45750611192610bf5565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b15156111df57600080fd5b5b6111e985613651565b1561133b5784915060016040518059106112005750595b9080825280601f01601f191660200182016040525090508173ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112d95780820151818401526020810190506112be565b50505050905090810190601f1680156113065780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561132657600080fd5b6102c65a03f1151561133757600080fd5b5050505b611384600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485613664565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611410600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548561367d565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114d9600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485613664565b600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b6000600a600060058401815260200190815260200160002060405180807f646561646c696e6500000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020549050919050565b60008311801561163b5750600560ff168311155b80156116475750600081115b80156116535750600082115b151561165e57600080fd5b80611667610bf5565b60086000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031115156116d657600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061177f5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561178a57600080fd5b42600a600085815260200190815260200160002060405180807f646561646c696e6500000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020541115801561183857506000600a600085815260200190815260200160002060405180807f646561646c696e650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902054115b156118f457600a600060058501815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c019050908152602001604051809103902054600a600060058601815260200190815260200160002060405180807f616d6f756e740000000000000000000000000000000000000000000000000000815250600601905090815260200160405180910390205411156118f3576118f283611dd7565b5b5b42600a600060058601815260200190815260200160002060405180807f6c6f636b54696d650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902081905550814201600a600060058601815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390208190555080600a600060058601815260200190815260200160002060405180807f616d6f756e74000000000000000000000000000000000000000000000000000081525060060190509081526020016040518091039020819055506000600a600060058601815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c0190509081526020016040518091039020819055503373ffffffffffffffffffffffffffffffffffffffff167fc07d0a5ac66f95424145a11a0f4776733362734d5e9fa8e6ecdff0cd5968b04d600a600060058701815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390205483604051808381526020018281526020019250505060405180910390a2505050565b60045481565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611c17576000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ca2565b611c218184613664565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060008086118015611df25750600560ff168611155b8015611ea15750600a600060058801815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c019050908152602001604051809103902054600a600060058901815260200190815260200160002060405180807f616d6f756e7400000000000000000000000000000000000000000000000000008152506006019050908152602001604051809103902054115b1515611eac57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611f555750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611f6057600080fd5b429450600a600060058801815260200190815260200160002060405180807f6c6f636b54696d650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902054935060009250600a600060058801815260200190815260200160002060405180807f616d6f756e74000000000000000000000000000000000000000000000000000081525060060190509081526020016040518091039020549150600a600060058801815260200190815260200160002060405180807f646561646c696e6500000000000000000000000000000000000000000000000081525060080190509081526020016040518091039020549050848111151561212b57600a600060058801815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c0190509081526020016040518091039020548203925082600a600060058901815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c0190509081526020016040518091039020600082825401925050819055506121f4565b600a600060058801815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c019050908152602001604051809103902054848203838688030281151561218f57fe5b0403925082600a600060058901815260200190815260200160002060405180807f756e6c6f636b416d6f756e740000000000000000000000000000000000000000815250600c0190509081526020016040518091039020600082825401925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167f7b76a2db4371920e9384f18ffe1d4817bf60308e9d5aabea636ba2e2e611550a8787600a600060058c01815260200190815260200160002060405180807f646561646c696e650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902054876040518085815260200184815260200183815260200182815260200194505050505060405180910390a2505050505050565b60055481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6122e861369b565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561237e5780601f106123535761010080835404028352916020019161237e565b820191906000526020600020905b81548152906001019060200180831161236157829003601f168201915b5050505050905090565b6000806123936136af565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156123cf57600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115151561241d57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561251c5761247b610bf5565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403841115801561251057506124ce610bf5565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561251b57600080fd5b5b61252585613651565b1561267757849150600160405180591061253c5750595b9080825280601f01601f191660200182016040525090508173ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3386846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156126155780820151818401526020810190506125fa565b50505050905090810190601f1680156126425780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b151561266257600080fd5b6102c65a03f1151561267357600080fd5b5050505b6126c0600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485613664565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061274c600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548561367d565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b600080821180156128155750600560ff168211155b801561286f575042600a600084815260200190815260200160002060405180807f646561646c696e650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902054105b80156128ca57506000600a600084815260200190815260200160002060405180807f616d6f756e7400000000000000000000000000000000000000000000000000008152506006019050908152602001604051809103902054115b15156128d557600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061297e5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561298957600080fd5b6000600a600084815260200190815260200160002060405180807f646561646c696e650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902081905550600a600083815260200190815260200160002060405180807f616d6f756e740000000000000000000000000000000000000000000000000000815250600601905090815260200160405180910390205490506000600a600084815260200190815260200160002060405180807f616d6f756e74000000000000000000000000000000000000000000000000000081525060060190509081526020016040518091039020819055503373ffffffffffffffffffffffffffffffffffffffff167fb2918ab7bbce88c5d881690a22a6cafe802664274a5044c300c3e3cacf7363e2600a600085815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390205483604051808381526020018281526020019250505060405180910390a25050565b60008083111515612b3e57600080fd5b612b4784613651565b15612c73578390508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a3385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612c11578082015181840152602081019050612bf6565b50505050905090810190601f168015612c3e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515612c5e57600080fd5b6102c65a03f11515612c6f57600080fd5b5050505b612cc583600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461366490919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d5a83600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461367d90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816040518082805190602001908083835b602083101515612dd35780518252602082019150602081019050602083039250612dae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16866040518082815260200191505060405180910390a450505050565b6000600a600083815260200190815260200160002060405180807f616d6f756e74000000000000000000000000000000000000000000000000000081525060060190509081526020016040518091039020549050919050565b6000612f4c600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361367d565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806131605750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561316b57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600a600060058401815260200190815260200160002060405180807f756e6c6f636b6564416d6f756e74000000000000000000000000000000000000815250600e019050908152602001604051809103902054600a600060058501815260200190815260200160002060405180807f616d6f756e7400000000000000000000000000000000000000000000000000008152506006019050908152602001604051809103902054039050919050565b6000831180156132fa5750600560ff168311155b80156133065750600081115b80156133125750600082115b80156133c657506000600a600085815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390205414806133c5575042600a600085815260200190815260200160002060405180807f646561646c696e650000000000000000000000000000000000000000000000008152506008019050908152602001604051809103902054105b5b15156133d157600080fd5b806133da610bf5565b60086000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540311151561344957600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806134f25750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156134fd57600080fd5b814201600a600085815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390208190555080600a600085815260200190815260200160002060405180807f616d6f756e74000000000000000000000000000000000000000000000000000081525060060190509081526020016040518091039020819055503373ffffffffffffffffffffffffffffffffffffffff167fb2918ab7bbce88c5d881690a22a6cafe802664274a5044c300c3e3cacf7363e2600a600086815260200190815260200160002060405180807f646561646c696e65000000000000000000000000000000000000000000000000815250600801905090815260200160405180910390205483604051808381526020018281526020019250505060405180910390a2505050565b600080823b905060008111915050919050565b600082821115151561367257fe5b818303905092915050565b600080828401905083811015151561369157fe5b8091505092915050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820683ec276528ad65f9735939f25dadea1503c14d4b1b0bc1230e79ed1e22c9c480029";

    protected CPSTestToken1(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CPSTestToken1(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LockFundExEventResponse> getLockFundExEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockFundEx", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LockFundExEventResponse> responses = new ArrayList<LockFundExEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LockFundExEventResponse typedResponse = new LockFundExEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockFundExEventResponse> lockFundExEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockFundEx", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockFundExEventResponse>() {
            @Override
            public LockFundExEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LockFundExEventResponse typedResponse = new LockFundExEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockFundExEventResponse> getUnlockFundExEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockFundEx", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnlockFundExEventResponse> responses = new ArrayList<UnlockFundExEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnlockFundExEventResponse typedResponse = new UnlockFundExEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cycle = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.unlockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.unlockAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockFundExEventResponse> unlockFundExEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockFundEx", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockFundExEventResponse>() {
            @Override
            public UnlockFundExEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnlockFundExEventResponse typedResponse = new UnlockFundExEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.cycle = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.unlockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.unlockAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LockFundEventResponse> getLockFundEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockFund", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LockFundEventResponse> responses = new ArrayList<LockFundEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LockFundEventResponse typedResponse = new LockFundEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockFundEventResponse> lockFundEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockFund", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockFundEventResponse>() {
            @Override
            public LockFundEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LockFundEventResponse typedResponse = new LockFundEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockFundEventResponse> getUnlockFundEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockFund", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnlockFundEventResponse> responses = new ArrayList<UnlockFundEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnlockFundEventResponse typedResponse = new UnlockFundEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockFundEventResponse> unlockFundEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockFund", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockFundEventResponse>() {
            @Override
            public UnlockFundEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnlockFundEventResponse typedResponse = new UnlockFundEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.deadline = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> lockedDeadline(BigInteger cycle) {
        Function function = new Function("lockedDeadline", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new Address(_spender),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> fundsWallet() {
        Function function = new Function("fundsWallet", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new Address(_from),
                new Address(_to),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> lockedExDeadline(BigInteger cycle) {
        Function function = new Function("lockedExDeadline", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> lockFundEx(BigInteger cycle, BigInteger numOfSeconds, BigInteger amount) {
        Function function = new Function(
                "lockFundEx", 
                Arrays.<Type>asList(new Uint256(cycle),
                new Uint256(numOfSeconds),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> unitsOneEthCanBuy() {
        Function function = new Function("unitsOneEthCanBuy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> decreaseApproval(String _spender, BigInteger _subtractedValue) {
        Function function = new Function(
                "decreaseApproval", 
                Arrays.<Type>asList(new Address(_spender),
                new Uint256(_subtractedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unlockFundEx(BigInteger cycle) {
        Function function = new Function(
                "unlockFundEx", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalEthInWei() {
        Function function = new Function("totalEthInWei", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> fundsAdmin() {
        Function function = new Function("fundsAdmin", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> totalLockAmount() {
        Function function = new Function("totalLockAmount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value, BigInteger weiValue) {
        Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> unlockFund(BigInteger cycle) {
        Function function = new Function(
                "unlockFund", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value, byte[] _data) {
        Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_value),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> lockedAmount(BigInteger cycle) {
        Function function = new Function("lockedAmount", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> increaseApproval(String _spender, BigInteger _addedValue) {
        Function function = new Function(
                "increaseApproval", 
                Arrays.<Type>asList(new Address(_spender),
                new Uint256(_addedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> modifyFundsAdmin(String newAdmin) {
        Function function = new Function(
                "modifyFundsAdmin", 
                Arrays.<Type>asList(new Address(newAdmin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        Function function = new Function("allowance", 
                Arrays.<Type>asList(new Address(_owner),
                new Address(_spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> lockedExAmount(BigInteger cycle) {
        Function function = new Function("lockedExAmount", 
                Arrays.<Type>asList(new Uint256(cycle)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> lockFund(BigInteger cycle, BigInteger numOfSeconds, BigInteger amount) {
        Function function = new Function(
                "lockFund", 
                Arrays.<Type>asList(new Uint256(cycle),
                new Uint256(numOfSeconds),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<CPSTestToken1> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger decimals, BigInteger totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Uint8(decimals),
                new Uint256(totalSupply)));
        return deployRemoteCall(CPSTestToken1.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CPSTestToken1> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger decimals, BigInteger totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Uint8(decimals),
                new Uint256(totalSupply)));
        return deployRemoteCall(CPSTestToken1.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static CPSTestToken1 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CPSTestToken1(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CPSTestToken1 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CPSTestToken1(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class LockFundExEventResponse {
        public String from;

        public BigInteger deadline;

        public BigInteger amount;
    }

    public static class UnlockFundExEventResponse {
        public String from;

        public BigInteger cycle;

        public BigInteger unlockTimestamp;

        public BigInteger deadline;

        public BigInteger unlockAmount;
    }

    public static class LockFundEventResponse {
        public String from;

        public BigInteger deadline;

        public BigInteger amount;
    }

    public static class UnlockFundEventResponse {
        public String from;

        public BigInteger deadline;

        public BigInteger amount;
    }


    public static class TransferEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ApprovalEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }
}
